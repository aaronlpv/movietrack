# Generated by Django 2.1.2 on 2018-12-06 11:16

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import movietrack.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('date', models.DateField()),
                ('time', models.TimeField()),
                ('streetname', models.CharField(max_length=100)),
                ('streetnumber', models.CharField(max_length=50)),
                ('zipcode', models.CharField(max_length=10)),
                ('city', models.CharField(max_length=100)),
                ('country', models.CharField(max_length=100)),
                ('movies', models.CharField(max_length=200)),
                ('maxlimit', models.CharField(max_length=4)),
                ('users', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FriendRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('year', models.IntegerField(validators=[movietrack.validators.validate_year])),
                ('runtime', models.IntegerField(help_text='in minutes', validators=[movietrack.validators.validate_runtime])),
                ('poster', models.ImageField(upload_to='posters/')),
                ('genres', models.ManyToManyField(to='movietrack.Genre')),
            ],
            options={
                'ordering': ['title', 'year'],
            },
        ),
        migrations.CreateModel(
            name='MovieRating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(blank=True, null=True, validators=[movietrack.validators.validate_score])),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movietrack.Movie')),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('favorites', models.ManyToManyField(related_name='users_favorited', to='movietrack.Movie')),
                ('friends', models.ManyToManyField(related_name='_profile_friends_+', to='movietrack.Profile')),
                ('seen', models.ManyToManyField(related_name='users_seen', through='movietrack.MovieRating', to='movietrack.Movie')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('want_to_watch', models.ManyToManyField(related_name='users_wtw', to='movietrack.Movie')),
            ],
        ),
        migrations.AddField(
            model_name='movierating',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movietrack.Profile'),
        ),
        migrations.AddField(
            model_name='friendrequest',
            name='receiver',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friendrequests_received', to='movietrack.Profile'),
        ),
        migrations.AddField(
            model_name='friendrequest',
            name='sender',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friendrequests_sent', to='movietrack.Profile'),
        ),
        migrations.AddField(
            model_name='comment',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authored_comments', to='movietrack.Profile'),
        ),
        migrations.AddField(
            model_name='comment',
            name='movie',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movietrack.Movie'),
        ),
        migrations.AlterUniqueTogether(
            name='movierating',
            unique_together={('user', 'movie')},
        ),
        migrations.AlterUniqueTogether(
            name='friendrequest',
            unique_together={('sender', 'receiver')},
        ),
    ]
